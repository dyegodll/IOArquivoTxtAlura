O m√©todo Dispose() em C# faz parte da interface IDisposable e √© usado para liberar recursos n√£o gerenciados, como conex√µes de banco de dados, arquivos ou conex√µes de rede. O using √© um atalho que garante a chamada autom√°tica do Dispose() ao final do bloco.

üîπ Como o Dispose() funciona?
O Dispose() √© implementado em classes que utilizam recursos externos ao gerenciamento do .NET, como Stream, SqlConnection, HttpClient, etc.

Exemplo de implementa√ß√£o do Dispose() em uma classe:

public class MeuRecurso : IDisposable
{
    private bool _disposed = false;

    public void UsarRecurso()
    {
        if (_disposed)
            throw new ObjectDisposedException("MeuRecurso");

        Console.WriteLine("Usando recurso...");
    }

    public void Dispose()
    {
        if (!_disposed)
        {
            Console.WriteLine("Liberando recurso...");
            _disposed = true;
        }
    }
}


üîπ Uso do Dispose() com using
O using simplifica a libera√ß√£o de recursos, garantindo que o Dispose() seja chamado automaticamente ao sair do escopo.

using (MeuRecurso recurso = new MeuRecurso())
{
    recurso.UsarRecurso();
} // Aqui o Dispose() √© chamado automaticamente

Isso equivale ao c√≥digo manual:

MeuRecurso recurso = new MeuRecurso();
try
{
    recurso.UsarRecurso();
}
finally
{
    recurso.Dispose(); // Garantia de libera√ß√£o
}

üîπ Exemplo com StreamReader
Aqui est√° um exemplo comum de using com StreamReader:

using (StreamReader leitor = new StreamReader("arquivo.txt"))
{
    string conteudo = leitor.ReadToEnd();
    Console.WriteLine(conteudo);
} // Dispose() √© chamado automaticamente no final

üîπ Por que usar using?
Evita vazamento de mem√≥ria ao liberar recursos corretamente.
C√≥digo mais limpo e seguro.
Garante que Dispose() seja chamado mesmo em caso de erro.